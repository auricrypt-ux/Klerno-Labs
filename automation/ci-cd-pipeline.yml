# ==============================================================================
# Klerno Labs - CI/CD Pipeline Configuration
# ==============================================================================
# GitHub Actions workflow for continuous integration and deployment

name: Klerno Labs CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly security scans
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ==============================================================================
  # Code Quality & Security
  # ==============================================================================
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [lint, format, security, type-check]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy bandit safety

    - name: Run Linting
      if: matrix.check == 'lint'
      run: |
        echo "üîç Running flake8 linting..."
        flake8 app/ --max-line-length=100 --statistics
        echo "‚úÖ Linting completed"

    - name: Check Code Formatting
      if: matrix.check == 'format'
      run: |
        echo "üé® Checking code formatting..."
        black --check --diff app/
        isort --check-only --diff app/
        echo "‚úÖ Formatting check completed"

    - name: Security Scan
      if: matrix.check == 'security'
      run: |
        echo "üîí Running security analysis..."
        bandit -r app/ -f json -o security-report.json
        safety check --json --output safety-report.json
        echo "‚úÖ Security scan completed"

    - name: Type Checking
      if: matrix.check == 'type-check'
      run: |
        echo "üìù Running type checking..."
        mypy app/ --ignore-missing-imports
        echo "‚úÖ Type checking completed"

    - name: Upload Security Reports
      if: matrix.check == 'security'
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          security-report.json
          safety-report.json

  # ==============================================================================
  # Testing
  # ==============================================================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, api]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: klerno_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock

    - name: Set Environment Variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:test_password@localhost:5432/klerno_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "APP_ENV=test" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-32-characters-long" >> $GITHUB_ENV

    - name: Run Unit Tests
      if: matrix.test-type == 'unit'
      run: |
        echo "üß™ Running unit tests..."
        pytest app/tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
        echo "‚úÖ Unit tests completed"

    - name: Run Integration Tests
      if: matrix.test-type == 'integration'
      run: |
        echo "üîó Running integration tests..."
        pytest app/tests/integration/ -v --maxfail=5
        echo "‚úÖ Integration tests completed"

    - name: Run API Tests
      if: matrix.test-type == 'api'
      run: |
        echo "üåê Running API tests..."
        pytest app/tests/api/ -v --maxfail=5
        echo "‚úÖ API tests completed"

    - name: Upload Coverage Reports
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ==============================================================================
  # Performance Testing
  # ==============================================================================
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Run Performance Tests
      run: |
        echo "‚ö° Running performance tests..."
        # Start the application in background
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
        # Run load tests
        locust --headless --users 10 --spawn-rate 2 \
               --host http://localhost:8000 \
               --run-time 60s \
               --html performance-report.html
        echo "‚úÖ Performance tests completed"

    - name: Upload Performance Report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html

  # ==============================================================================
  # Security Scanning
  # ==============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Klerno Labs'
        path: '.'
        format: 'HTML'
        out: 'dependency-check-report'

    - name: Upload Dependency Check Report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: dependency-check-report

  # ==============================================================================
  # Docker Build & Security Scan
  # ==============================================================================
  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: false
        tags: klerno-labs:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy Container Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: klerno-labs:latest
        format: 'sarif'
        output: 'container-scan-results.sarif'

    - name: Upload Container Scan Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'container-scan-results.sarif'

  # ==============================================================================
  # Documentation
  # ==============================================================================
  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mkdocs mkdocs-material

    - name: Build Documentation
      run: |
        echo "üìö Building documentation..."
        # Generate API documentation
        python -c "
        from app.main import app
        import json
        openapi = app.openapi()
        with open('docs/openapi.json', 'w') as f:
            json.dump(openapi, f, indent=2)
        "
        
        # Build documentation site
        mkdocs build --strict
        echo "‚úÖ Documentation built successfully"

    - name: Upload Documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: site/

  # ==============================================================================
  # Deployment
  # ==============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [code-quality, test, security, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Deploy to Staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add deployment logic here
        echo "‚úÖ Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, test, security, docker, performance]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Deploy to Production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add deployment logic here
        echo "‚úÖ Production deployment completed"

  # ==============================================================================
  # Notifications
  # ==============================================================================
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [code-quality, test, security]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.code-quality.result == 'success' && needs.test.result == 'success' && needs.security.result == 'success'
      run: |
        echo "‚úÖ All checks passed successfully!"
        # Add notification logic (Slack, Discord, email, etc.)

    - name: Notify Failure
      if: needs.code-quality.result == 'failure' || needs.test.result == 'failure' || needs.security.result == 'failure'
      run: |
        echo "‚ùå Some checks failed!"
        # Add notification logic for failures